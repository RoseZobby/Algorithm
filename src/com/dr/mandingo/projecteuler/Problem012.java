package com.dr.mandingo.projecteuler;

import java.util.ArrayList;
import java.util.List;

/**
 * Highly divisible triangular number
 * 
 * ============================================================================
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 
 * 3: 1,3
 * 
 * 6: 1,2,3,6
 * 
 * 10: 1,2,5,10
 * 
 * 15: 1,3,5,15
 * 
 * 21: 1,3,7,21
 * 
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * Answer:76576500
 */
public class Problem012 {

	public static void main(String[] args) {
		int gate = 500;
		long triangle = 0;
		for (long i = 1;; i++) {
			triangle += i;
			int counter = 0;

			List<Long> posList = new ArrayList<Long>();
			long lastPos = Long.MIN_VALUE;
			for (long k = 2;; k++) {
				long pos = (triangle / k);
				if (pos != lastPos) {
					posList.add(pos);
					lastPos = pos;
				}
				if (pos < 10000) {
					break;
				}
			}

			int posIndex = 0;
			for (long j = posList.get(posIndex); j >= 1;) {
				if (triangle % j == 0) {
					counter++;
				}
				if (posIndex < posList.size() - 1) {
					posIndex++;
					j = posList.get(posIndex);
				} else {
					j--;
				}
			}
			if (counter + 1 > gate) {
				System.out.println("the final result is:" + triangle);
				break;
			}
		}
	}
}
